@use "sass:math";
@use "sass:map";

@use "../tools/functions" as *;

// types
$types: primary, success, warning, danger, error, info;

// Color
$colors: () !default;
$colors: map.deep-merge(
  (
    "white": #ffffff,
    "black": #212121,
    "primary": (
      "base": #6750a4,
    ),
    "success": (
      "base": #67c23a,
    ),
    "warning": (
      "base": #e6a23c,
    ),
    "danger": (
      "base": #ff5252,
    ),
    "error": (
      "base": #ff5252,
    ),
    "info": (
      "base": #a3a3a3,
    ),
  ),
  $colors
);

$color-white: map.get($colors, "white") !default;
$color-black: map.get($colors, "black") !default;
$color-primary: map.get($colors, "primary", "base") !default;
$color-success: map.get($colors, "success", "base") !default;
$color-warning: map.get($colors, "warning", "base") !default;
$color-danger: map.get($colors, "danger", "base") !default;
$color-error: map.get($colors, "error", "base") !default;
$color-info: map.get($colors, "info", "base") !default;

// https://sass-lang.com/documentation/values/maps#immutability
// mix colors with white/black to generate light/dark level
@mixin set-color-mix-level(
  $type,
  $number,
  $mode: "light",
  $mix-color: $color-white
) {
  $colors: map.deep-merge(
    (
      $type: (
        "#{$mode}-#{$number}":
          mix(
            $mix-color,
            map.get($colors, $type, "base"),
            math.percentage(math.div($number, 10))
          ),
      ),
    ),
    $colors
  ) !global;
}

// $colors.primary.light-i
// --md-color-primary-light-i
@each $type in $types {
  @for $i from 1 through 9 {
    @include set-color-mix-level($type, $i, "light", $color-white);
  }
}

// --md-color-primary-dark-2
@each $type in $types {
  @include set-color-mix-level($type, 2, "dark", $color-black);
}

$text-color: () !default;
$text-color: map.merge(
  (
    "primary": #303133,
    "regular": #606266,
    "secondary": #909399,
    "placeholder": #a8abb2,
    "disabled": #c0c4cc,
  ),
  $text-color
);

$border-color: () !default;
$border-color: map.merge(
  (
    "": #dcdfe6,
    "light": #e4e7ed,
    "lighter": #ebeef5,
    "extra-light": #f2f6fc,
    "dark": #d4d7de,
    "darker": #cdd0d6,
  ),
  $border-color
);

$fill-color: () !default;
$fill-color: map.merge(
  (
    "": #f0f2f5,
    "light": #f5f7fa,
    "lighter": #fafafa,
    "extra-light": #fafcff,
    "dark": #ebedf0,
    "darker": #e6e8eb,
    "blank": #ffffff,
  ),
  $fill-color
);

// Background
$bg-color: () !default;
$bg-color: map.merge(
  (
    "": #ffffff,
    "page": #f2f3f5,
    "overlay": #ffffff,
  ),
  $bg-color
);

// Border
$border-width: 1px !default;
$border-style: solid !default;
$border-color-hover: get_css_var("text-color", "disabled") !default;

$border-radius: () !default;
$border-radius: map.merge(
  (
    "base": 4px,
    "small": 2px,
    "round": 20px,
    "circle": 100%,
  ),
  $border-radius
);

$avatar: () !default;
$avatar: map.merge(
  (
    "text-color": get_css_var("color-white"),
    "bg-color": get_css_var("text-color", "disabled"),
    "text-size": calc(get_css_var("avatar", "size") - 16px),
    "icon-size": 28px,
    "border-radius": get_css_var("border-radius-base"),
  ),
  $avatar
);

$avatar-size: () !default;
$avatar-size: map.merge(
  (
    "large": 64px,
    "default": 40px,
    "small": 24px,
  ),
  $avatar-size
);

$grid: () !default;
$grid: map.merge(
  (
    "row-gap-xs": 0,
    "row-gap-sm": 0,
    "row-gap-md": 0,
    "row-gap-lg": 0,
    "row-gap-xl": 0,
    "col-gap-xs": 0,
    "col-gap-sm": 0,
    "col-gap-md": 0,
    "col-gap-lg": 0,
    "col-gap-xl": 0,
    "columns": 12,
  ),
  $grid
);

// Break-point
$sm: 600px !default;
$md: 900px !default;
$lg: 1200px !default;
$xl: 1530px !default;

$breakpoints: (
  "xs": "(max-width: #{$sm})",
  "sm": "(min-width: #{$sm})",
  "md": "(min-width: #{$md})",
  "lg": "(min-width: #{$lg})",
  "xl": "(min-width: #{$xl})",
) !default;

$breakpoints-spec: (
  "xs-only": "(max-width: #{$sm - 1})",
  // 'sm-and-up': '(min-width: #{$sm})',
  "sm-only": "(min-width: #{$sm}) and (max-width: #{$md - 1})",
  // 'sm-and-down': '(max-width: #{$md - 1})',
  // 'md-and-up': '(min-width: #{$md})',
  "md-only": "(min-width: #{$md}) and (max-width: #{$lg - 1})",
  // 'md-and-down': '(max-width: #{$lg - 1})',
  // 'lg-and-up': '(min-width: #{$lg})',
  "lg-only": "(min-width: #{$lg}) and (max-width: #{$xl - 1})",
  // 'lg-and-down': '(max-width: #{$xl - 1})',
  "xl-only": "(min-width: #{$xl})",
) !default;
