@use "sass:map";

@use "config";
@use "colors";

// md-bem('block', 'element', 'modifier') => 'md-block__element--modifier'
@function md-bem($block, $element: "", $modifier: "") {
  $name: config.$namespace + config.$common-separator + $block;

  @if $element != "" {
    $name: $name + config.$element-separator + $element;
  }

  @if $modifier != "" {
    $name: $name + config.$modifier-separator + $modifier;
  }

  // @debug $name;
  @return $name;
}

// join var name
// joinVarName(('button', 'text-color')) => '--md-button-text-color'
@function join-var-name($list) {
  $name: "--" + config.$namespace;
  @each $item in $list {
    @if $item != "" {
      $name: $name + "-" + $item;
    }
  }
  @return $name;
}

// get_css_var_name('button', 'text-color') => '--md-button-text-color'
@function get_css_var_name($args...) {
  @return join-var-name($args);
}

// get-css-var('button', 'text-color') => var(--md-button-text-color)
@function get-css-var($args...) {
  @return var(#{join-var-name($args)});
}

@function get-color-value($base-color, $color-name, $tone-value) {
  $red: red($base-color);
  $green: green($base-color);
  $blue: blue($base-color);

  $new-red: $red + ($tone-value * 2.55);
  $new-green: $green + ($tone-value * (2.1 + $tone-value * 0.01));
  $new-blue: $blue + ($tone-value * (2.1 + $tone-value * 0.01));

  $new-color: rgb($new-red, $new-green, $new-blue);
  $new-color-name: "#{ $color-name }#{ $tone-value }";

  @return $new-color;
}

@function get-color-sheme($mode: light) {
  $base-types: (
    "primary": "primary",
    "secondary": "secondary",
    "tertiary": "tertiary",
    "error": "error",
  );
  $palette: colors.$color-scheme;
  $scheme: map.get(colors.$theme-color-scheme, $mode);
  $colors: () !default;
  @each $type, $child-types in $scheme {
    @each $attribute, $value in $child-types {
      $color-type: if(
        map.get(
          $base-types,
          if(type-of($value) == "map", map.get($value, "type"), $type)
        ),
        map.get(
          $base-types,
          if(type-of($value) == "map", map.get($value, "type"), $type)
        ),
        "neutral"
      );
      $color-level: if(
        type-of($value) == "map",
        map.get($value, "value"),
        $value
      );

      $colors: map.merge(
        (
          #{$attribute}:
            if(
              map.get($palette, #{$color-type}#{$color-level}),
              var(
                --md-my-color-#{$attribute},
                map.get($palette, #{$color-type}#{$color-level})
              ),
              null
            )
        ),
        $colors
      );
    }
  }

  @return $colors;
}
